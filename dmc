#!/bin/sh
#
# dmc - dynamic mail client
# Copyleft 2009 -- pancake <at> nopcode <dot> org
#

VERSION="0.1"
COPYRIGHT="Copyleft -- pancake@nopcode.org"
HELP="Usage: dmc [-hv] [-e acc] [-a addr] [-m addr subj] [-A file] [-s msg] [action]"

[ -n "${EDITOR}" ] && EDITOR=vim
mkdir -p ~/.dmc/mail
mkdir -p ~/.dmc/tmp
mkdir -p ~/.dmc/acc
[ -e ~/.dmc/acc.default ] && . ~/.dmc/acc.default

function acc_daemon {
  FIFO=~/.dmc/tmp/${NAME}.fifo
  INPUT=~/.dmc/tmp/${NAME}.input
  OUTPUT=~/.dmc/tmp/${NAME}.output

  if [ ${SSL} = 1 ]; then
    NETCMD="openssl s_client -quiet -host $HOST -port $POST"
  else
    NETCMD="nc $HOST $PORT"
  fi

  echo "Starting $NAME account daemon..."

  rm -f ${INPUT}
  mkfifo ${INPUT}
  mkfifo ${FIFO}
  echo login ${USER} ${PASS} > ${INPUT} &
  (while : ; do cat ${INPUT} 2> /dev/null ; done) | \
    dmc-${PROTOCOL} $FIFO 2> ${OUTPUT} | $NETCMD > $FIFO
  rm -f ${INPUT}
}

function dmc_cmd {
# while not 0x00 is found...sleep 1
  #:> ~/.dmc/tmp/${NAME}.output
  # XXX this is going to fail and lock
  OUT=~/.dmc/tmp/${NAME}.output
  :> ${OUT}
  echo "$@" > ~/.dmc/tmp/${NAME}.input
  # XXX ultraugly way to check for eof
  osize=0
  while : ; do
    size=`du -hs ${OUT}|awk '{print $1}'`
    if [ "$size" = 0 ]; then
	sleep 1
    else
      if [ "$size" = "$osize" ]; then
        break
      else
        sleep 1
        osize=$size
      fi
    fi
  done
  cat ${OUT}
}

function start_account_daemons {
  i=0
  for a in ~/.dmc/acc/* ; do
    ( source $a ; acc_daemon ) &
    i=$(($i+1))
  done
  if [ "$i" = 0 ]; then
    echo "No accounts defined in ~/.dmc/acc"
    exit 1
  fi
}

function print_account_template {
  echo "NAME='test'"
  echo "SSL=0"
  echo "LIMIT=50 # get only 50 mails for each folder"
  echo "PROTOCOL='pop3' # imap4"
  echo "HOST=serverhost.com"
  echo "PORT=110"
  echo "#SEND=acc-name"
  echo "SEND=!msmtp"
  echo "MAIL=username@domain"
  echo "USER='username'"
  echo "PASS='password'"
}

function edit_message {
  OUTDIR=~/.dmc/box/${NAME}/out
  mkdir -p ${OUTDIR}
  OUT="`mktemp ${OUTDIR}/mail.XXXXXX`"
  echo "From: ${MAIL}" > $OUT
  echo "To: ${TO}" > $OUT
  echo "Subject: ${SUBJECT}" >> $OUT
  echo "" >> $OUT
  echo "" >> $OUT
  if [ -e ~/.dmc/box/${NAME}/signature ]; then
    echo "---" >> $OUT
    cat ~/.dmc/box/${NAME}/signature >> $OUT
  else
    if [ -e ~/.dmc/signature ]; then
      echo "---" >> $OUT
      cat ~/.dmc/signature >> $OUT
    fi
  fi
  ${EDITOR} ${OUT}
  if [ -z "`cat ${OUT}`" ]; then
    echo "Aborted mail"
    rm -f "${OUT}"
  else
    ln -fs "${OUT}" ~/.dmc/mail.last
  fi
}

function add_attachment {
  OUT="`readlink ~/.dmc/mail.last`"
  if [ -z "${OUT}" ]; then
    echo "No ~/.dmc/mail.last found. 'dmc -m' or manual symlink required."
  else
    mkdir -p "${OUT}.d"
    if [ -f "$1" ]; then
      FILE="`basename \"$1\"`"
      ln -fs "$1" "${OUT}.d/${FILE}"
    else
      echo "Cannot find \â…›$1\""
    fi
  fi
}

function send_message {
  FILE=$1
  if [ ! -e "${FILE}" ]; then
    echo "Cannot find '${FILE}'"
    exit 1
  fi
  # TODO: find better name for the auto mode
  if [ "${SEND}" = "!msmtp" ]; then
    TO="`dmc -H To < $FILE`"
    SJ="`dmc -H Subject < $FILE`"
    echo "Sending mail to $TO (${SJ})..."
#    HOST=`dmc-smtp ${TO}`
    msmtp "--user=${USER}" "--from=${MAIL}" $TO < ${FILE}
    return $?
  elif [ "`echo \"${SEND}\" | grep '|'`" ]; then
    echo "=> cat $1 ${SEND}"
    # TODO: setup environment for $TO $SUBJECT ...
    eval cat $1 ${SEND}
  else
    echo "SEND method '${SEND}' not supported"
  fi
  return 0
}

function pull_mails {
  echo "Pulling mails from account '${NAME}'"
  # This is pop3-only
  i=1
  while : ; do
    [ "${LIMIT}" = "$i" ] && break
    dmc -c cat $i > ~/.dmc/box/${NAME}/in/$i.eml
    if [ -n "`head -n 3 ~/.dmc/box/${NAME}/in/$i.eml | grep ERR`" ]; then
      rm ~/.dmc/box/${NAME}/in/$i.eml
      break
    else
      size=`du -hs ~/.dmc/box/${NAME}/in/$i.eml | awk '{print \$1}'`
      echo "got $i $size"
    fi
    i=$(($i+1))
  done
}

case "$1" in
"start")
  start_account_daemons
  sleep 1
  ;;
"stop")
  for a in ~/.dmc/tmp/*.input ; do
    echo $a
    echo exit > $a
    rm -f ~/.dmc/tmp/$a
  done
  sleep 1
  pkill cat
  rm -f ~/.dmc/tmp/*
  pkill dmc
  ;;
"push")
  for a in ~/.dmc/acc/* ; do
    . $a
    if [ -d ~/.dmc/box/${NAME}/out ]; then
      for b in ~/.dmc/box/${NAME}/out/* ; do
        if [ -f "$b" ]; then
          send_message "$b"
          if [ $? = 0 ]; then
            echo "Mail sent. local copy moved to ~/.dmc/box/${NAME}/sent"
            mkdir -p ~/.dmc/box/${NAME}/sent
            mv $b ~/.dmc/box/${NAME}/sent
          else
            echo "There was an error while sending the mail"
          fi
        fi
      done
    fi
  done
  ;;
"pull")
  for a in ~/.dmc/acc/* ; do
    . $a
    mkdir -p ~/.dmc/box/${NAME}/in
    pull_mails
  done
  ;;
"-e"|"--edit")
  if [ -n "$2" ]; then
    [ -z "`cat ~/.dmc/acc/$2`" ] && \
      print_account_template "$2" > ~/.dmc/acc/$2
    ${EDITOR} ~/.dmc/acc/$2
    # Remove account if empty
    if [ -z "`cat ~/.dmc/acc/$2`" ]; then
      rm ~/.dmc/acc/$2
    else
      # by default
      echo "The '$2' account is now the default"
      ln -fs ~/.dmc/acc/$2 ~/.dmc/acc.default
    fi
  else
    ls ~/.dmc/acc | cat
  fi
  ;;
"-H"|"--header")
  [ -z "$2" ] && break
  grep -e : | grep -re "^$2:" | cut -d : -f 2- | sed 's, ,,'
  ;;
"-c"|"--cmd")
  if [ -z "$2" ]; then
    while : ; do
      printf "> "
      read A
      dmc_cmd "$A"
    done
  else
    shift
    dmc_cmd "$@"
  fi
  ;;
"-s"|"--send")
  shift
  for a in $* ; do
    send_message $a
  done
  ;;
"-m"|"--mail")
  TO="$2"
  SUBJECT="$3"
  edit_message
  ;;
"-A"|"--add-attachment")
  while : ; do
    shift
    [ -z "$1" ] && break
    add_attachment $1
  done
  ;;
"-a"|"--addr")
  if [ -n "$2" ]; then
    while : ; do
      shift
      [ -z "$1" ] && break
      grep -e "$1" ~/.dmc/addrbook
    done
  else
    ${EDITOR} ~/.dmc/addrbook
  fi
  ;;
"-v"|"--version")
  echo "dmc v${VERSION} ${COPYRIGHT}"
  ;;
"--help"|"-h")
  echo ${HELP}
  echo " -e account     edit account information"
  echo " -a name        show addressbook email for contact"
  echo " -c cmd         run command for \$DMC_ACCOUNT or acc.default daemon"
  echo " -m addr subj   create mail with default account"
  echo " -H header      grep for header"
  echo " -A file        add attachment to mail"
  echo " -s file        send email"
  echo " -v             show version"
  echo " -h             show this help message"
  echo " start          start mail daemons"
  echo " stop           stop them all"
  echo " push           send mails in box/*/out"
  echo " pull           update box/*/in folders"
  ;;
*)
  echo "${HELP}"
  ;;
esac

exit 0
